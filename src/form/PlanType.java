/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import static data.Config.BAND_WIDTH;
import static data.Config.SELF_INTERFERENCE_INDEX;
import static data.Config.TRANS_RANGE_SINK;
import data.Sensor;
import data.SinkNode;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Point2D;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import javax.swing.JOptionPane;

/**
 *
 * @author ĐĐ
 */
public class PlanType extends javax.swing.JFrame {

    Graphics graphic;//khởi tạo thư viện graphics
    Sensor sensor;//Sensor trung gian nhận thuộc tính từ form Main
    SinkNode sink1,sink2;//Sink
    int number;//Số lượng sensor (lấy từ form main)
    List<Sensor> listSensor = new ArrayList<>();//danh sách các sensor 
    int transmissionRange;//vùng hoạt động của sensor

    public Sensor getSensor() {
        return sensor;
    }

    public void setSensor(Sensor sensor) {
        this.sensor = sensor;
    }

    public int getNumber() {
        return number;
    }

    public void setNumber(int number) {
        this.number = number;
    }

    /**
     * Creates new form PlanType
     */
    public PlanType() {//constructor 
        initComponents();
        initGraphics();
        addWindowListener(new WindowAdapter() {//form load
            @Override
            public void windowOpened(WindowEvent e) {
                transmissionRange = sensor.getTransmissionRange();
                drawSensorNetwork();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnSaveToFile = new javax.swing.JButton();
        btnReadFile = new javax.swing.JButton();

        setTitle("PlanType");

        jPanel1.setBackground(new java.awt.Color(255, 204, 255));
        jPanel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                drawSensor(evt);
            }
        });

        btnSaveToFile.setText("Save To File");
        btnSaveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToFileActionPerformed(evt);
            }
        });

        btnReadFile.setText("ReadFile");
        btnReadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(btnSaveToFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReadFile)
                .addGap(0, 530, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveToFile)
                    .addComponent(btnReadFile))
                .addGap(0, 477, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void initGraphics() {//khởi tạo constructor của thư viện graphics
        graphic = this.getGraphics();
        graphic.setPaintMode();
    }

    public void drawCircle(int x, int y, int trans) {//vẽ hình tròn và đường tròn
        graphic.setColor(Color.blue);
        //vẽ đường tròn với các tham số x,y,chiều cao,chiều rộng,từ 0-360 độ
        graphic.drawArc(x - trans, y - trans, 2 * trans, 2 * trans, 0, 360);
        graphic.setColor(Color.yellow);
        ////vẽ hình tròn với các tham số x,y,chiều cao,chiều rộng,từ 0-360 độ
        graphic.fillArc(x + 1 - trans, y + 1 - trans, 2 * trans - 2, 2 * trans - 2, 0, 360);
    }

    public void drawCircleSink(int x, int y, int trans) {//vẽ đường tròn sink
        graphic.setColor(Color.RED);
        graphic.drawArc(x - trans, y - trans, 2 * trans, 2 * trans, 0, 360);
    }

    public void drawSensorNetwork() {//Vẽ các sensor random và sink 
        createSinkSensor();
        int x = 0, y = 0;
        Random rdx = new Random();//random tọa độ của x
        Random rdy = new Random();//random tọa độ của y
        //
        int index=1;
        for (int i = 1; i < number/2; i++) {
            double data1 = getDataConnect(sink1);
            if (data1 >= SELF_INTERFERENCE_INDEX * BAND_WIDTH-sensor.getSpeed()*sensor.getCapacityOfPackage()) {//nếu mà data đáp ứng đủ rồi thì random ra chỗ khác
                x = rdx.nextInt(this.getHeight());
                y = rdy.nextInt(this.getWidth());
                while (((x >= 100 && x <= 300) || (y >= 100 && y <= 300))) {
                    x = rdx.nextInt(this.getHeight());
                    y = rdy.nextInt(this.getWidth());
                }
            } else {
                x = TRANS_RANGE_SINK + rdx.nextInt(200);
                y = TRANS_RANGE_SINK + rdy.nextInt(200);
            }
            drawCircle(x, y, sensor.getTransmissionRange());
            //Random đc sensor nào thì add vào list
            Sensor s = new Sensor(sensor.getTransmissionRange(), sensor.getSpeed(), sensor.getCapacityOfPackage(), sensor.getStartUpEnergy(), sensor.getTransmitPower(), sensor.getReceivePower());
            s.setId(index);
            s.setPoint(new Point2D.Double(x, y));
            listSensor.add(s);
            graphic.setColor(Color.black);
            graphic.setFont(new Font("Arial", Font.PLAIN, 8));
            graphic.drawString(index + "", x, y);
            index++;
        }
        for (int i = 1; i < number/2; i++) {
            double data1 = getDataConnect(sink1);
            double data2 = getDataConnect(sink2);
            if (data2 >= SELF_INTERFERENCE_INDEX * BAND_WIDTH-sensor.getSpeed()*sensor.getCapacityOfPackage()) {//nếu mà data đáp ứng đủ rồi thì random ra chỗ khác
                x = rdx.nextInt(this.getHeight());
                y = rdy.nextInt(this.getWidth());
                while ((x >= 100 && x <= 430) || (y >= 100 && y <= 430)) {
                    x = rdx.nextInt(this.getHeight());
                    y = rdy.nextInt(this.getWidth());
                }
            } else {
                x = TRANS_RANGE_SINK + rdx.nextInt(330);
                y = TRANS_RANGE_SINK + rdy.nextInt(330);
                while (sink1.isConnected(x, y, sensor.getTransmissionRange())) {
                    x = rdx.nextInt(this.getHeight());
                    y = rdy.nextInt(this.getWidth());
                }
                
            }
            drawCircle(x, y, sensor.getTransmissionRange());
            //Random đc sensor nào thì add vào list
            Sensor s = new Sensor(sensor.getTransmissionRange(), sensor.getSpeed(), sensor.getCapacityOfPackage(), sensor.getStartUpEnergy(), sensor.getTransmitPower(), sensor.getReceivePower());
            s.setId(index);
            s.setPoint(new Point2D.Double(x, y));
            listSensor.add(s);
            graphic.setColor(Color.black);
            graphic.setFont(new Font("Arial", Font.PLAIN, 8));
            graphic.drawString(index + "", x, y);
            index++;
        }

        JOptionPane.showMessageDialog(this, "Sink 1: Transmission data: " + getDataConnect(sink1) + "bps"+"\nSink 2: Transmission data: " + getDataConnect(sink2) + "bps", "Information", JOptionPane.INFORMATION_MESSAGE);
    }

    public void createSinkSensor() {//khởi tạo fix cứng 1 sink
        sink1 = new SinkNode();
        sink1.setId(1);
        sink1.setTransmissionRange(TRANS_RANGE_SINK);
        sink1.setPoint(new Point2D.Double(200, 200));
        drawCircleSink((int) sink1.getPoint().x, (int) sink1.getPoint().y, TRANS_RANGE_SINK);
        sink2 = new SinkNode();
        sink2.setId(2);
        sink2.setTransmissionRange(TRANS_RANGE_SINK);
        sink2.setPoint(new Point2D.Double(330, 330));
        drawCircleSink((int) sink2.getPoint().x, (int) sink2.getPoint().y, TRANS_RANGE_SINK);
    }

    public double getDataConnect(SinkNode s) {//Lấy ra tổng số data mà sink nhận được 
        double data = 0;
        for (int i = 0; i < listSensor.size(); i++) {
            if (s.isConnected(listSensor.get(i))) {
                data += listSensor.get(i).getSpeed() * listSensor.get(i).getCapacityOfPackage();
            }
        }
        return data;
    }

    private void drawSensor(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawSensor
//        transmissionRange = sensor.getTransmissionRange();
//        int x = evt.getX();
//        int y = evt.getY() + 30;
//        System.out.println("x=" + x + ",y=" + y);
//        drawCircle(x, y);
//        graphic.setColor(Color.black);
//        graphic.setFont(new Font("Arial", Font.PLAIN, 8));
//        graphic.drawString(index + "", x, y);
//        sensor.setId(index);
//        sensor.setPoint(new Point2D.Double(x, y));
//        list.add(sensor);
//        System.out.println(list.get(index-1).toString());
//        index++;
    }//GEN-LAST:event_drawSensor

    private void btnSaveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToFileActionPerformed
        try {
            FileOutputStream fos = new FileOutputStream("PlanDeployment.dat");
            ObjectOutputStream dos = new ObjectOutputStream(fos);
            dos.writeObject(listSensor);
            dos.writeObject(sink1);
            JOptionPane.showMessageDialog(this, "Write file success", "Information", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Write file failed", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveToFileActionPerformed

    private void btnReadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadFileActionPerformed
        clearPanel();
        try {
            FileInputStream fos = new FileInputStream("PlanDeployment.dat");
            ObjectInputStream dos = new ObjectInputStream(fos);
            listSensor = (List<Sensor>) dos.readObject();
            sink1 = (SinkNode) dos.readObject();
            //JOptionPane.showMessageDialog(this, "Read file suceess", "Information", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Read file failed", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
        drawByFile();
        JOptionPane.showMessageDialog(this, "Sink 1: Transmission data: " + getDataConnect(sink1) + "bps"+"\nSink 2: Transmission data: " + getDataConnect(sink2) + "bps", "Information", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnReadFileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PlanType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PlanType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PlanType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PlanType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PlanType().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReadFile;
    private javax.swing.JButton btnSaveToFile;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables

    private void drawByFile() {
        int index = 1;
        for (Sensor s : listSensor) {
            //System.out.println(s);
            drawCircle((int) s.getPoint().x, (int) s.getPoint().y, s.getTransmissionRange());
            graphic.setColor(Color.black);
            graphic.setFont(new Font("Arial", Font.PLAIN, 8));
            graphic.drawString(index + "", (int) s.getPoint().x, (int) s.getPoint().y);
            index++;
        }
        drawCircleSink((int) sink1.getPoint().x, (int) sink1.getPoint().y, TRANS_RANGE_SINK);
    }

    public void drawCircleBlank(int x, int y, int trans) {//xóa hình tròn bằng màu nền
        Color color = new Color(255, 204, 255);
        graphic.setColor(color);
        //vẽ đường tròn với các tham số x,y,chiều cao,chiều rộng,từ 0-360 độ
        graphic.drawArc(x - trans, y - trans, 2 * trans, 2 * trans, 0, 360);
        graphic.setColor(color);
        ////vẽ hình tròn với các tham số x,y,chiều cao,chiều rộng,từ 0-360 độ
        graphic.fillArc(x + 1 - trans, y + 1 - trans, 2 * trans - 2, 2 * trans - 2, 0, 360);
    }

    public void clearPanel() {// clear panel để vẽ tham số đọc từ file 
        int index = 1;
        for (Sensor s : listSensor) {
            //System.out.println(s);
            drawCircleBlank((int) s.getPoint().x, (int) s.getPoint().y, s.getTransmissionRange());
            Color color = new Color(255, 204, 255);
            graphic.setColor(color);
            graphic.drawString(index + "", (int) s.getPoint().x, (int) s.getPoint().y);
            index++;
        }
        drawCircleBlank((int) sink1.getPoint().x, (int) sink1.getPoint().y, sink1.getTransmissionRange());
    }
}
