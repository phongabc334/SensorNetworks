/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package form;

import data.Config;
import static data.Config.BAND_WIDTH;
import static data.Config.SELF_INTERFERENCE_INDEX;
import data.Sensor;
import data.SensorNetwork;
import data.SinkNode;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Point2D;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

public class RandomType extends javax.swing.JFrame {

    Graphics graphic;//khởi tạo thư viện graphics
    Sensor sensor;//Sensor trung gian nhận dữ liệu từ form main
    List<Sensor> listSensor = new ArrayList<>();//danh sách các sensor trong mạng
    List<SinkNode> listSink = new ArrayList<>();//danh sách các sink trong mạng
    SensorNetwork sensoNetwork;//khởi tạo mạng
    List<SinkNode> listSinkEmulator;//danh sách giả lập tất cả các nút đề là nút sink
    int number;//số lượng sink 
    int transmissionRange;//vùng hoạt động của sensor 

    public Sensor getSensor() {
        return sensor;
    }

    public void setSensor(Sensor sensor) {
        this.sensor = sensor;
    }

    public int getNumber() {
        return number;
    }

    public void setNumber(int number) {
        this.number = number;
    }

    public RandomType() {//constructor 
        initComponents();
        initGraphics();
        addWindowListener(new WindowAdapter() {//form load
            @Override
            public void windowOpened(WindowEvent e) {
                transmissionRange = sensor.getTransmissionRange();
                loadRandom(number);
                btnSaveToFile.setFocusable(false);
                btnReadFile.setFocusable(false);
                panelBgr.setFocusable(true);
                showInforSink();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        panelBgr = new javax.swing.JPanel();
        btnReadFile = new javax.swing.JButton();
        btnSaveToFile = new javax.swing.JButton();

        setTitle("RandomType");
        setBackground(new java.awt.Color(255, 204, 204));
        setForeground(java.awt.Color.red);

        panelBgr.setBackground(new java.awt.Color(255, 204, 255));
        panelBgr.setPreferredSize(new java.awt.Dimension(700, 500));

        btnReadFile.setText("Read File");
        btnReadFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReadFileActionPerformed(evt);
            }
        });

        btnSaveToFile.setText("Save To File");
        btnSaveToFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveToFileActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelBgrLayout = new javax.swing.GroupLayout(panelBgr);
        panelBgr.setLayout(panelBgrLayout);
        panelBgrLayout.setHorizontalGroup(
            panelBgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBgrLayout.createSequentialGroup()
                .addComponent(btnSaveToFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnReadFile)
                .addGap(0, 526, Short.MAX_VALUE))
        );
        panelBgrLayout.setVerticalGroup(
            panelBgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelBgrLayout.createSequentialGroup()
                .addGroup(panelBgrLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSaveToFile)
                    .addComponent(btnReadFile))
                .addContainerGap(477, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(panelBgr, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(panelBgr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //sự kiện click button lưu file
    private void btnSaveToFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveToFileActionPerformed
        try {
            FileOutputStream fos = new FileOutputStream("RandomDeployment.dat");
            ObjectOutputStream dos = new ObjectOutputStream(fos);
            dos.writeObject(listSensor);
            dos.writeObject(listSink);
            JOptionPane.showMessageDialog(this, "Write file success", "Information", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Write file failed", "Information", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_btnSaveToFileActionPerformed
    //sự kiện click button đọc file
    private void btnReadFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReadFileActionPerformed
        clearPanel();
        try {
            FileInputStream fos = new FileInputStream("RandomDeployment.dat");
            ObjectInputStream dos = new ObjectInputStream(fos);
            listSensor = (List<Sensor>) dos.readObject();
            listSink = (List<SinkNode>) dos.readObject();
            System.out.println(listSensor.size());
            System.out.println(listSink.size());
            //JOptionPane.showMessageDialog(this, "Read file suceess", "Information", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Read file failed", "Information", JOptionPane.INFORMATION_MESSAGE);

        }
        drawByFile();
        showInforSink();
    }//GEN-LAST:event_btnReadFileActionPerformed
    //khởi tạo thư viện
    public void initGraphics() {
        graphic = this.getGraphics();
        graphic.setPaintMode();
    }
    //
    public void drawCircle(int x, int y, int trans) {//vẽ hình tròn và đường tròn
        graphic.setColor(Color.blue);
        //vẽ đường tròn với các tham số x,y,chiều cao,chiều rộng,từ 0-360 độ
        graphic.drawArc(x - trans, y - trans, 2 * trans, 2 * trans, 0, 360);
        graphic.setColor(Color.yellow);
        ////vẽ hình tròn với các tham số x,y,chiều cao,chiều rộng,từ 0-360 độ
        graphic.fillArc(x + 1 - trans, y + 1 - trans, 2 * trans - 2, 2 * trans - 2, 0, 360);
    }
    
    public void loadRandom(int number) {//random các sensor theo tọa độ ngẫu nhiên
        int x = 0, y = 0;
        Random rdx = new Random();//random tọa độ x
        Random rdy = new Random();//random tọa độ y
        for (int i = 1; i < number; i++) {
            x = rdx.nextInt(this.getWidth());
            y = rdy.nextInt(this.getHeight());
            drawCircle(x, y, transmissionRange);
            Sensor s = new Sensor(sensor.getTransmissionRange(), sensor.getSpeed(), sensor.getCapacityOfPackage(), sensor.getStartUpEnergy(), sensor.getTransmitPower(), sensor.getReceivePower());
            s.setId(i);
            s.setPoint(new Point2D.Double(x, y));
            listSensor.add(s);// random được sensor thì add vào list 
            graphic.setColor(Color.black);
            graphic.setFont(new Font("Arial", Font.PLAIN, 8));
            graphic.drawString(i + "", x, y);//vẽ số thứ tự của sensor
        }
        sensoNetwork = new SensorNetwork(this.getWidth(), this.getHeight(), listSensor, 1);
        listSinkEmulator = sensoNetwork.getListSink();//lấy sink giả lập
        drawSinkSensor();
        
    }

    public void drawCircleSink(SinkNode s) {// vẽ đường tròn của sink
        if (s.checkEnabled()) {
            graphic.setColor(Color.RED);
        }else{
            graphic.setColor(Color.GRAY);
        }
        graphic.drawArc((int)s.getPoint().x - s.getTransmissionRange(), (int)s.getPoint().y - s.getTransmissionRange(), 2 * s.getTransmissionRange(), 2 * s.getTransmissionRange(), 0, 360);
    }

    public void drawSinkSensor() {//vẽ tất cả sink
        listSink = findSensorNeed();
        totalPackageOfEachSink();
        for (SinkNode sensorSink : listSink) {
            drawCircleSink(sensorSink);
        }
    }
    public void drawCircleBlank(int x, int y, int trans) {//xóa hình tròn bằng màu nền
        Color color = new Color(255, 204, 255);
        graphic.setColor(color);
        //vẽ đường tròn với các tham số x,y,chiều cao,chiều rộng,từ 0-360 độ
        graphic.drawArc(x - trans, y - trans, 2 * trans, 2 * trans, 0, 360);
        graphic.setColor(color);
        ////vẽ hình tròn với các tham số x,y,chiều cao,chiều rộng,từ 0-360 độ
        graphic.fillArc(x + 1 - trans, y + 1 - trans, 2 * trans - 2, 2 * trans - 2, 0, 360);
    }
    public void clearPanel() {// clear panel để vẽ tham số đọc từ file 
        int index = 1;
        for (Sensor s : listSensor) {
            //System.out.println(s);
            drawCircleBlank((int) s.getPoint().x, (int) s.getPoint().y, s.getTransmissionRange());
            Color color = new Color(255, 204, 255);
            graphic.setColor(color);
            graphic.drawString(index + "", (int) s.getPoint().x, (int) s.getPoint().y);
            index++;
        }
        for (Sensor s : listSink) {
            drawCircleBlank((int) s.getPoint().x, (int) s.getPoint().y, s.getTransmissionRange());
        }
    }


    public void drawByFile() { //vẽ các sensor và sink sau khi đọc file 
        int index = 1;
        for (Sensor s : listSensor) {
            //System.out.println(s);
            drawCircle((int) s.getPoint().x, (int) s.getPoint().y, s.getTransmissionRange());
            graphic.setColor(Color.black);
            graphic.setFont(new Font("Arial", Font.PLAIN, 8));
            graphic.drawString(index + "", (int) s.getPoint().x, (int) s.getPoint().y);
            index++;
        }
        for (SinkNode s : listSink) {
            drawCircleSink(s);
        }
    }

//    public void findListSink() {
//        
//        listSink.add(sensorNode);
//    }
    //Vẽ sink
    //Tìm sink sensor xa nhất và tiếp xúc với sensor sink đang xét
    public SinkNode sensorFar(SinkNode sink, List<SinkNode> list) {
        Sensor x = new Sensor();
        double max = 0;
        int index = 0;
        for (int i = 0; i < list.size(); i++) {
            double kc = sink.getDistance(list.get(i));
            if (kc > max && sink.getDistance(list.get(i)) <= (sink.getTransmissionRange() + list.get(i).getTransmissionRange())) {
                max = kc;
                index = i;
            }
        }
        return list.get(index);
    }

    //Tìm list sensor connect được với nút sink
    public List<SinkNode> listNear(SinkNode sink, List<SinkNode> list1) {
        List<SinkNode> list = new ArrayList<>();
        for (SinkNode list11 : list1) {
            if (list11.isConnected(sink)) {
                list.add(list11);
            }
        }
        return list;
    }

    //đệ quy tìm các sensor bên cạnh 
    public void sensorNear(SinkNode sink, SinkNode sink2, SinkNode sink3, List<SinkNode> list, List<SinkNode> listcantim) {

        double max = 0;
        int index = 0;
        for (int i = 0; i < list.size(); i++) {
            boolean x;
            if (sink3 != null) {
                x = list.get(index).isConnected(sink3);
            } else {
                x = false;
            }
            //Tìm sensor thứ 3 kết nối đc với 2 sensor đang xét theo độ dài khoảng cách
            if (sink.isConnected(list.get(i)) && sink2.isConnected(list.get(i)) && (sink.getDistance(list.get(i)) + sink2.getDistance(list.get(i)) >= max) && (!x)) {
                max = sink.getDistance(list.get(i)) + sink2.getDistance(list.get(i));
                index = i;
            }
        }
        //nếu mà nó không chứa sink đó thì thêm vào list 
        if (!listcantim.contains(list.get(index))) {
            listcantim.add(list.get(index));
//            sensorNear(sink, list.get(index), sink2, list, listcantim);
//            List<SinkNode> li = listNear(sink2, listSinkEmulator);
//            sensorNear(sink2, list.get(index), sink, li, listcantim);
//            sensorNear(sink, sink2, list.get(index), list, listcantim);
        }
    }

    //Tìm list sink
    public List<SinkNode> findSensorNeed() {
        List<SinkNode> sensorList = new ArrayList<>();
        SinkNode sensorNode = sensoNetwork.getSinkSensor();
        SinkNode sink2 = sensorFar(sensorNode, listSinkEmulator);
        sensorList.add(sensorNode);
        sensorList.add(sink2);
        sensorNear(sensorNode, sink2, null, listNear(sensorNode, listSinkEmulator), sensorList);
        return sensorList;
    }

    public void totalPackageOfEachSink() {//tính tổng số lượng data mỗi sink nhận đc 
        for (int i = 0; i < listSink.size(); i++) {
            double data = 0;
            for (int j = 0; j < listSensor.size(); j++) {
                if (listSink.get(i).isConnected(listSensor.get(j))) {
                    data += listSensor.get(j).getSpeed() * listSensor.get(j).getCapacityOfPackage();
                }
            }
        DecimalFormat format = new DecimalFormat("#0.00");
        format.format(data);
            listSink.get(i).setDataReceive(data);
        }
    }

    public void showInforSink() {//hiển thị thông tin tổng data của từng sink
        int index = 1;
        String message = "";
        for (SinkNode sinkNode: listSink) {
            message += "Sink " + index + ", Data: " + sinkNode.getDataReceive() + "bps, Enabled: " + sinkNode.checkEnabled()+"\n";
            index++;
            //System.out.println(key.toString()+value);
        }
        JOptionPane.showMessageDialog(this, message, "Information", JOptionPane.INFORMATION_MESSAGE);
        // System.out.println("Infor:"+message);
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RandomType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RandomType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RandomType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RandomType.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RandomType().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReadFile;
    private javax.swing.JButton btnSaveToFile;
    private javax.swing.JPanel panelBgr;
    // End of variables declaration//GEN-END:variables
}
